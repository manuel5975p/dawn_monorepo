// Copyright 2022 The Dawn & Tint Authors
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/lang/core/builtin_type_test.cc.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/lang/core/builtin_type.h"

#include <string>

#include "gtest/gtest.h"

#include "src/tint/utils/text/string.h"

namespace tint::core {
namespace {

namespace parse_print_tests {

struct Case {
    const char* string;
    BuiltinType value;
};

inline std::ostream& operator<<(std::ostream& out, Case c) {
    return out << "'" << std::string(c.string) << "'";
}

static constexpr Case kValidCases[] = {
    {"__atomic_compare_exchange_result_i32", BuiltinType::kAtomicCompareExchangeResultI32},
    {"__atomic_compare_exchange_result_u32", BuiltinType::kAtomicCompareExchangeResultU32},
    {"__frexp_result_abstract", BuiltinType::kFrexpResultAbstract},
    {"__frexp_result_f16", BuiltinType::kFrexpResultF16},
    {"__frexp_result_f32", BuiltinType::kFrexpResultF32},
    {"__frexp_result_vec2_abstract", BuiltinType::kFrexpResultVec2Abstract},
    {"__frexp_result_vec2_f16", BuiltinType::kFrexpResultVec2F16},
    {"__frexp_result_vec2_f32", BuiltinType::kFrexpResultVec2F32},
    {"__frexp_result_vec3_abstract", BuiltinType::kFrexpResultVec3Abstract},
    {"__frexp_result_vec3_f16", BuiltinType::kFrexpResultVec3F16},
    {"__frexp_result_vec3_f32", BuiltinType::kFrexpResultVec3F32},
    {"__frexp_result_vec4_abstract", BuiltinType::kFrexpResultVec4Abstract},
    {"__frexp_result_vec4_f16", BuiltinType::kFrexpResultVec4F16},
    {"__frexp_result_vec4_f32", BuiltinType::kFrexpResultVec4F32},
    {"__modf_result_abstract", BuiltinType::kModfResultAbstract},
    {"__modf_result_f16", BuiltinType::kModfResultF16},
    {"__modf_result_f32", BuiltinType::kModfResultF32},
    {"__modf_result_vec2_abstract", BuiltinType::kModfResultVec2Abstract},
    {"__modf_result_vec2_f16", BuiltinType::kModfResultVec2F16},
    {"__modf_result_vec2_f32", BuiltinType::kModfResultVec2F32},
    {"__modf_result_vec3_abstract", BuiltinType::kModfResultVec3Abstract},
    {"__modf_result_vec3_f16", BuiltinType::kModfResultVec3F16},
    {"__modf_result_vec3_f32", BuiltinType::kModfResultVec3F32},
    {"__modf_result_vec4_abstract", BuiltinType::kModfResultVec4Abstract},
    {"__modf_result_vec4_f16", BuiltinType::kModfResultVec4F16},
    {"__modf_result_vec4_f32", BuiltinType::kModfResultVec4F32},
    {"array", BuiltinType::kArray},
    {"atomic", BuiltinType::kAtomic},
    {"binding_array", BuiltinType::kBindingArray},
    {"bool", BuiltinType::kBool},
    {"f16", BuiltinType::kF16},
    {"f32", BuiltinType::kF32},
    {"i32", BuiltinType::kI32},
    {"i8", BuiltinType::kI8},
    {"input_attachment", BuiltinType::kInputAttachment},
    {"mat2x2", BuiltinType::kMat2X2},
    {"mat2x2f", BuiltinType::kMat2X2F},
    {"mat2x2h", BuiltinType::kMat2X2H},
    {"mat2x3", BuiltinType::kMat2X3},
    {"mat2x3f", BuiltinType::kMat2X3F},
    {"mat2x3h", BuiltinType::kMat2X3H},
    {"mat2x4", BuiltinType::kMat2X4},
    {"mat2x4f", BuiltinType::kMat2X4F},
    {"mat2x4h", BuiltinType::kMat2X4H},
    {"mat3x2", BuiltinType::kMat3X2},
    {"mat3x2f", BuiltinType::kMat3X2F},
    {"mat3x2h", BuiltinType::kMat3X2H},
    {"mat3x3", BuiltinType::kMat3X3},
    {"mat3x3f", BuiltinType::kMat3X3F},
    {"mat3x3h", BuiltinType::kMat3X3H},
    {"mat3x4", BuiltinType::kMat3X4},
    {"mat3x4f", BuiltinType::kMat3X4F},
    {"mat3x4h", BuiltinType::kMat3X4H},
    {"mat4x2", BuiltinType::kMat4X2},
    {"mat4x2f", BuiltinType::kMat4X2F},
    {"mat4x2h", BuiltinType::kMat4X2H},
    {"mat4x3", BuiltinType::kMat4X3},
    {"mat4x3f", BuiltinType::kMat4X3F},
    {"mat4x3h", BuiltinType::kMat4X3H},
    {"mat4x4", BuiltinType::kMat4X4},
    {"mat4x4f", BuiltinType::kMat4X4F},
    {"mat4x4h", BuiltinType::kMat4X4H},
    {"ptr", BuiltinType::kPtr},
    {"sampler", BuiltinType::kSampler},
    {"sampler_comparison", BuiltinType::kSamplerComparison},
    {"subgroup_matrix_left", BuiltinType::kSubgroupMatrixLeft},
    {"subgroup_matrix_result", BuiltinType::kSubgroupMatrixResult},
    {"subgroup_matrix_right", BuiltinType::kSubgroupMatrixRight},
    {"texture_1d", BuiltinType::kTexture1D},
    {"texture_2d", BuiltinType::kTexture2D},
    {"texture_2d_array", BuiltinType::kTexture2DArray},
    {"texture_3d", BuiltinType::kTexture3D},
    {"texture_cube", BuiltinType::kTextureCube},
    {"texture_cube_array", BuiltinType::kTextureCubeArray},
    {"texture_depth_2d", BuiltinType::kTextureDepth2D},
    {"texture_depth_2d_array", BuiltinType::kTextureDepth2DArray},
    {"texture_depth_cube", BuiltinType::kTextureDepthCube},
    {"texture_depth_cube_array", BuiltinType::kTextureDepthCubeArray},
    {"texture_depth_multisampled_2d", BuiltinType::kTextureDepthMultisampled2D},
    {"texture_external", BuiltinType::kTextureExternal},
    {"texture_multisampled_2d", BuiltinType::kTextureMultisampled2D},
    {"texture_storage_1d", BuiltinType::kTextureStorage1D},
    {"texture_storage_2d", BuiltinType::kTextureStorage2D},
    {"texture_storage_2d_array", BuiltinType::kTextureStorage2DArray},
    {"texture_storage_3d", BuiltinType::kTextureStorage3D},
    {"u32", BuiltinType::kU32},
    {"u8", BuiltinType::kU8},
    {"vec2", BuiltinType::kVec2},
    {"vec2f", BuiltinType::kVec2F},
    {"vec2h", BuiltinType::kVec2H},
    {"vec2i", BuiltinType::kVec2I},
    {"vec2u", BuiltinType::kVec2U},
    {"vec3", BuiltinType::kVec3},
    {"vec3f", BuiltinType::kVec3F},
    {"vec3h", BuiltinType::kVec3H},
    {"vec3i", BuiltinType::kVec3I},
    {"vec3u", BuiltinType::kVec3U},
    {"vec4", BuiltinType::kVec4},
    {"vec4f", BuiltinType::kVec4F},
    {"vec4h", BuiltinType::kVec4H},
    {"vec4i", BuiltinType::kVec4I},
    {"vec4u", BuiltinType::kVec4U},
};

static constexpr Case kInvalidCases[] = {
    {"__atomic_compareexchangeccresult_i32", BuiltinType::kUndefined},
    {"__atoml3_compare_exchane_resulti2", BuiltinType::kUndefined},
    {"__atomic_compare_Vxchange_result_i32", BuiltinType::kUndefined},
    {"__atomic_com1are_exchange_result_u32", BuiltinType::kUndefined},
    {"__atomic_qqompare_exchage_resulJ_u32", BuiltinType::kUndefined},
    {"__atllmic_compare_exchange_result_u377", BuiltinType::kUndefined},
    {"qpp_frexp_resultHHbstract", BuiltinType::kUndefined},
    {"__fep_esulv_abstract", BuiltinType::kUndefined},
    {"__Gbexp_resul_abstract", BuiltinType::kUndefined},
    {"_vfrexp_resiilt_f16", BuiltinType::kUndefined},
    {"__fr8xp_resultWWf16", BuiltinType::kUndefined},
    {"__frxp_result_fMxx", BuiltinType::kUndefined},
    {"gg_fXexp_reslt_f32", BuiltinType::kUndefined},
    {"__frXxpresul_V32", BuiltinType::kUndefined},
    {"__frexp_r3sult_f32", BuiltinType::kUndefined},
    {"__frexpEresult_vec2_abstract", BuiltinType::kUndefined},
    {"__frex_rPPsult_vTTc2_abstract", BuiltinType::kUndefined},
    {"__frexp_resuddt_ec2_xxbstract", BuiltinType::kUndefined},
    {"__frexp_result_ve442_f16", BuiltinType::kUndefined},
    {"_SSfrexp_resulVV_vec2_f16", BuiltinType::kUndefined},
    {"__fRxpRr22sult_vec2_f16", BuiltinType::kUndefined},
    {"__frexp_res9lt_vec_fF2", BuiltinType::kUndefined},
    {"__frexp_result_ve2_f32", BuiltinType::kUndefined},
    {"_OOfrexp_result_VeHRRf32", BuiltinType::kUndefined},
    {"__frexp_reyult_vec3_absract", BuiltinType::kUndefined},
    {"__frexp_re77ulll_vecG_arrnstract", BuiltinType::kUndefined},
    {"__4rexp_result_vec3_00bstract", BuiltinType::kUndefined},
    {"__oorxp_result_vec316", BuiltinType::kUndefined},
    {"zz_frexp_esult_ec3_f16", BuiltinType::kUndefined},
    {"__iirex11_result_vp3_f16", BuiltinType::kUndefined},
    {"__frXXxp_result_vec3_f32", BuiltinType::kUndefined},
    {"__fnnexp99resIIlt_vec3_f355", BuiltinType::kUndefined},
    {"__faSSerrp_result_vHHc3_fY2", BuiltinType::kUndefined},
    {"__freHp_resutve4_abstkkact", BuiltinType::kUndefined},
    {"jfrexpgresult_veRR4_abstrac", BuiltinType::kUndefined},
    {"__frexp_resul_vec4_absbrac", BuiltinType::kUndefined},
    {"_jfrexp_result_vec4_f16", BuiltinType::kUndefined},
    {"__frexp_resultvec4_f16", BuiltinType::kUndefined},
    {"__freqpresultvec4_f16", BuiltinType::kUndefined},
    {"__frexNN_result_vec_f32", BuiltinType::kUndefined},
    {"__frexp_resvvlt_vc4_f3", BuiltinType::kUndefined},
    {"__frexp_esult_vec4_f3QQ", BuiltinType::kUndefined},
    {"rmodf_reffultabstract", BuiltinType::kUndefined},
    {"__jodf_result_abstract", BuiltinType::kUndefined},
    {"_mNNwdf_r2sult8abstract", BuiltinType::kUndefined},
    {"__mdf_result_f16", BuiltinType::kUndefined},
    {"__modrr_result_f16", BuiltinType::kUndefined},
    {"__mGdf_result_f16", BuiltinType::kUndefined},
    {"__modf_resulFF_f32", BuiltinType::kUndefined},
    {"__modf_eult_E3", BuiltinType::kUndefined},
    {"__odf_resurrt_f32", BuiltinType::kUndefined},
    {"__modf_reslt_vec_abstract", BuiltinType::kUndefined},
    {"__modfJJresuDt_Xc2_abstract", BuiltinType::kUndefined},
    {"_modf_reslt_vec28abstrct", BuiltinType::kUndefined},
    {"__odf_reult_vkc211f1", BuiltinType::kUndefined},
    {"__mdf_result_vec2_f16", BuiltinType::kUndefined},
    {"__modf_resuJt_vec2_f6", BuiltinType::kUndefined},
    {"__modf_result_vec2cf32", BuiltinType::kUndefined},
    {"__modf_result_vec2_fO2", BuiltinType::kUndefined},
    {"KK_movvf_result_vec2_ftt__", BuiltinType::kUndefined},
    {"xx_modf_r8sult_vec3_abtr5ct", BuiltinType::kUndefined},
    {"__modf_resuFt_vec3_aqt__act", BuiltinType::kUndefined},
    {"__modf_result_vec3_aqqstrac", BuiltinType::kUndefined},
    {"__odf_33esult_vec3_f1O6", BuiltinType::kUndefined},
    {"_ttm6df_resQQlt_ooec9_f16", BuiltinType::kUndefined},
    {"_modf_resu66t_vec3_f16", BuiltinType::kUndefined},
    {"__mdf_resultOvxc3_f36zz", BuiltinType::kUndefined},
    {"__modf_resuyyt_vec3_f32", BuiltinType::kUndefined},
    {"__mod_resul_vecZHHf32", BuiltinType::kUndefined},
    {"__modf_reqult_44ec4WWbstract", BuiltinType::kUndefined},
    {"__mof_result_vec4_abstrOOct", BuiltinType::kUndefined},
    {"__modYooresult_vh4_bstract", BuiltinType::kUndefined},
    {"__modf_relt_ve4_f16", BuiltinType::kUndefined},
    {"__modf_result_ve4Ff16", BuiltinType::kUndefined},
    {"__modf_result_wec4_f1", BuiltinType::kUndefined},
    {"__Kdff_rGsult_vec4_f2", BuiltinType::kUndefined},
    {"__modf_reKKulq_vec4_f32", BuiltinType::kUndefined},
    {"__modf_resummt3vec4_f3F", BuiltinType::kUndefined},
    {"arry", BuiltinType::kUndefined},
    {"qray", BuiltinType::kUndefined},
    {"arrbb", BuiltinType::kUndefined},
    {"iomic", BuiltinType::kUndefined},
    {"aOOmiq", BuiltinType::kUndefined},
    {"atomTvvc", BuiltinType::kUndefined},
    {"binding_aFFray", BuiltinType::kUndefined},
    {"indinPfaQ0ray", BuiltinType::kUndefined},
    {"binding_arPay", BuiltinType::kUndefined},
    {"bos77", BuiltinType::kUndefined},
    {"CoRbbl", BuiltinType::kUndefined},
    {"booXX", BuiltinType::kUndefined},
    {"qOOO6", BuiltinType::kUndefined},
    {"fs", BuiltinType::kUndefined},
    {"f1X", BuiltinType::kUndefined},
    {"f3", BuiltinType::kUndefined},
    {"q", BuiltinType::kUndefined},
    {"f322", BuiltinType::kUndefined},
    {"0yz2", BuiltinType::kUndefined},
    {"iVP", BuiltinType::kUndefined},
    {"Cnn", BuiltinType::kUndefined},
    {"AHq", BuiltinType::kUndefined},
    {"8", BuiltinType::kUndefined},
    {"f", BuiltinType::kUndefined},
    {"lnPu_attggchmet", BuiltinType::kUndefined},
    {"input_attacment", BuiltinType::kUndefined},
    {"TTnput4atcachmNnt", BuiltinType::kUndefined},
    {"lat7xpp", BuiltinType::kUndefined},
    {"mgtzzN", BuiltinType::kUndefined},
    {"bXXt2x2", BuiltinType::kUndefined},
    {"matx2f", BuiltinType::kUndefined},
    {"Qt882f", BuiltinType::kUndefined},
    {"mt9q2f", BuiltinType::kUndefined},
    {"m11t2x2h", BuiltinType::kUndefined},
    {"22at2iih", BuiltinType::kUndefined},
    {"at2x277", BuiltinType::kUndefined},
    {"NNa223", BuiltinType::kUndefined},
    {"VVat2x3", BuiltinType::kUndefined},
    {"ma11F2w3", BuiltinType::kUndefined},
    {"mawwx3f", BuiltinType::kUndefined},
    {"Dat2x3f", BuiltinType::kUndefined},
    {"mt2x3K", BuiltinType::kUndefined},
    {"mat21PPhh", BuiltinType::kUndefined},
    {"mat23h", BuiltinType::kUndefined},
    {"mYYt2x3h", BuiltinType::kUndefined},
    {"atkkxtH", BuiltinType::kUndefined},
    {"matrrx4", BuiltinType::kUndefined},
    {"mWWstx4", BuiltinType::kUndefined},
    {"Yt2x4f", BuiltinType::kUndefined},
    {"mt2qff", BuiltinType::kUndefined},
    {"mav222xuf", BuiltinType::kUndefined},
    {"t2x4h", BuiltinType::kUndefined},
    {"YYat2h", BuiltinType::kUndefined},
    {"may2x4EYY", BuiltinType::kUndefined},
    {"Moatd2", BuiltinType::kUndefined},
    {"mt3xMM", BuiltinType::kUndefined},
    {"m55t3x2", BuiltinType::kUndefined},
    {"maN32", BuiltinType::kUndefined},
    {"ma3Ox33", BuiltinType::kUndefined},
    {"m3t3x2f", BuiltinType::kUndefined},
    {"mam3xI", BuiltinType::kUndefined},
    {"mnnt3r2K", BuiltinType::kUndefined},
    {"m3XX", BuiltinType::kUndefined},
    {"Lat3Ip", BuiltinType::kUndefined},
    {"t3xf", BuiltinType::kUndefined},
    {"aYRRUD", BuiltinType::kUndefined},
    {"mah3x3f", BuiltinType::kUndefined},
    {"uuIqt3x", BuiltinType::kUndefined},
    {"maH3x3f", BuiltinType::kUndefined},
    {"at3QQvv", BuiltinType::kUndefined},
    {"at66eh", BuiltinType::kUndefined},
    {"ma7O3h", BuiltinType::kUndefined},
    {"m0t55DD4", BuiltinType::kUndefined},
    {"IIaH3x4", BuiltinType::kUndefined},
    {"mat3x", BuiltinType::kUndefined},
    {"mar34f", BuiltinType::kUndefined},
    {"mat3l4f", BuiltinType::kUndefined},
    {"maJJ3G4", BuiltinType::kUndefined},
    {"mat3y4", BuiltinType::kUndefined},
    {"mt3x4h", BuiltinType::kUndefined},
    {"IIaBB3x4h", BuiltinType::kUndefined},
    {"mat8TTx2", BuiltinType::kUndefined},
    {"mYnnUUSddx2", BuiltinType::kUndefined},
    {"xCZ54x2", BuiltinType::kUndefined},
    {"matkkq2f", BuiltinType::kUndefined},
    {"005itpxf", BuiltinType::kUndefined},
    {"maIInnx2f", BuiltinType::kUndefined},
    {"Ka4Wcc", BuiltinType::kUndefined},
    {"m42KK", BuiltinType::kUndefined},
    {"mat66x2h", BuiltinType::kUndefined},
    {"mKKtPx", BuiltinType::kUndefined},
    {"maxx43", BuiltinType::kUndefined},
    {"matqx3", BuiltinType::kUndefined},
    {"MMayySrxf", BuiltinType::kUndefined},
    {"mat3f", BuiltinType::kUndefined},
    {"tx3f", BuiltinType::kUndefined},
    {"ma5F4x3h", BuiltinType::kUndefined},
    {"rra444z3h", BuiltinType::kUndefined},
    {"matWW", BuiltinType::kUndefined},
    {"ZZJJtCxX", BuiltinType::kUndefined},
    {"PPat4x", BuiltinType::kUndefined},
    {"cat4x4", BuiltinType::kUndefined},
    {"matPPll6f", BuiltinType::kUndefined},
    {"mat994yy", BuiltinType::kUndefined},
    {"mat4JKKf", BuiltinType::kUndefined},
    {"mat4_h", BuiltinType::kUndefined},
    {"ayK4h", BuiltinType::kUndefined},
    {"mzt4V4k", BuiltinType::kUndefined},
    {"KtS", BuiltinType::kUndefined},
    {"pr", BuiltinType::kUndefined},
    {"pVV", BuiltinType::kUndefined},
    {"AAamIlUr", BuiltinType::kUndefined},
    {"sbjer", BuiltinType::kUndefined},
    {"YY44pl", BuiltinType::kUndefined},
    {"samper_comparison", BuiltinType::kUndefined},
    {"sample11_cxxmpaisn", BuiltinType::kUndefined},
    {"sampccermmcompaJis", BuiltinType::kUndefined},
    {"subgroup_matrx_leJJt", BuiltinType::kUndefined},
    {"sUbgrouflCCatDDix_left", BuiltinType::kUndefined},
    {"subgroup_matrig_left", BuiltinType::kUndefined},
    {"subgroCC_atrix_reult", BuiltinType::kUndefined},
    {"subgroup_matrixresult", BuiltinType::kUndefined},
    {"subgrou___matrix_rIsult", BuiltinType::kUndefined},
    {"PPbroup_mNtttix_right", BuiltinType::kUndefined},
    {"subgroup_matrix3ddight", BuiltinType::kUndefined},
    {"subgroup_ayyrix_right", BuiltinType::kUndefined},
    {"tetuuud", BuiltinType::kUndefined},
    {"t03nnuri_1d", BuiltinType::kUndefined},
    {"CCentuKuuv1d", BuiltinType::kUndefined},
    {"tXxtllre2d", BuiltinType::kUndefined},
    {"toxppure_2d", BuiltinType::kUndefined},
    {"texturww_2", BuiltinType::kUndefined},
    {"gexture2dmmaruua", BuiltinType::kUndefined},
    {"texmmre_2daaarr", BuiltinType::kUndefined},
    {"textRRcceT2d_aZray", BuiltinType::kUndefined},
    {"teTt88rO_3d", BuiltinType::kUndefined},
    {"te00turm_3d", BuiltinType::kUndefined},
    {"meBBture_3d", BuiltinType::kUndefined},
    {"texppueMcub", BuiltinType::kUndefined},
    {"texturO_cube", BuiltinType::kUndefined},
    {"GeGGturecube", BuiltinType::kUndefined},
    {"tHHx11ure_cube_array", BuiltinType::kUndefined},
    {"te6ure_FFeebe_array", BuiltinType::kUndefined},
    {"textue_cube_aray", BuiltinType::kUndefined},
    {"texture_dKptiil2d", BuiltinType::kUndefined},
    {"texture_dept_2d", BuiltinType::kUndefined},
    {"IIext99redevvth_2d", BuiltinType::kUndefined},
    {"texture_deth_2d_array", BuiltinType::kUndefined},
    {"tehture_depth_2d_array", BuiltinType::kUndefined},
    {"zzexturPP_depth_2d_allay", BuiltinType::kUndefined},
    {"txtu_deph_cube", BuiltinType::kUndefined},
    {"texture_qqepth_ffub", BuiltinType::kUndefined},
    {"textre_JJddpth_cubW", BuiltinType::kUndefined},
    {"textur_deXXzz_cube_array", BuiltinType::kUndefined},
    {"texture_dept2cube_array", BuiltinType::kUndefined},
    {"texture_depth_cubeyyarNay", BuiltinType::kUndefined},
    {"txtuOe_depth_mltisampled_2d", BuiltinType::kUndefined},
    {"texture_dZPthumultisamrled_Ed", BuiltinType::kUndefined},
    {"tex22ure_depth_eeddltisapled_2l", BuiltinType::kUndefined},
    {"mextureVVter9al", BuiltinType::kUndefined},
    {"teIItu1_external", BuiltinType::kUndefined},
    {"texturb_external", BuiltinType::kUndefined},
    {"texture_mi7isapled_zd", BuiltinType::kUndefined},
    {"texture_muliiisampoed_2d", BuiltinType::kUndefined},
    {"tnxure_multiampled_2d", BuiltinType::kUndefined},
    {"exture_storiSe_1d", BuiltinType::kUndefined},
    {"t22xue_storage_1d", BuiltinType::kUndefined},
    {"texture_Ct71rageGd", BuiltinType::kUndefined},
    {"textu8e_storageff2d", BuiltinType::kUndefined},
    {"textre_strage_2d", BuiltinType::kUndefined},
    {"tJJxture_SStorage_2d", BuiltinType::kUndefined},
    {"texte_st9rage_2d_array", BuiltinType::kUndefined},
    {"tbbxture_storTTge_2d_arraJJ", BuiltinType::kUndefined},
    {"txture_storage_2d66rray", BuiltinType::kUndefined},
    {"textur66_stouage_3", BuiltinType::kUndefined},
    {"textureWtoryge_3d", BuiltinType::kUndefined},
    {"texture_storag_3", BuiltinType::kUndefined},
    {"u3", BuiltinType::kUndefined},
    {"r32", BuiltinType::kUndefined},
    {"u2B", BuiltinType::kUndefined},
    {"BB", BuiltinType::kUndefined},
    {"RR", BuiltinType::kUndefined},
    {"1", BuiltinType::kUndefined},
    {"f2wfc2", BuiltinType::kUndefined},
    {"55T", BuiltinType::kUndefined},
    {"TqL2", BuiltinType::kUndefined},
    {"Eii2", BuiltinType::kUndefined},
    {"ec2f", BuiltinType::kUndefined},
    {"UU882", BuiltinType::kUndefined},
    {"rrecvvh", BuiltinType::kUndefined},
    {"ecmm", BuiltinType::kUndefined},
    {"vec4j", BuiltinType::kUndefined},
    {"vec2X", BuiltinType::kUndefined},
    {"vec28", BuiltinType::kUndefined},
    {"vecvEE", BuiltinType::kUndefined},
    {"z99ci", BuiltinType::kUndefined},
    {"GGeJJA2u", BuiltinType::kUndefined},
    {"vess2u", BuiltinType::kUndefined},
    {"PecK", BuiltinType::kUndefined},
    {"vtc3", BuiltinType::kUndefined},
    {"e3", BuiltinType::kUndefined},
    {"MMec3f", BuiltinType::kUndefined},
    {"vJJc30", BuiltinType::kUndefined},
    {"8c", BuiltinType::kUndefined},
    {"vecggKh", BuiltinType::kUndefined},
    {"vecfh", BuiltinType::kUndefined},
    {"vec37Q", BuiltinType::kUndefined},
    {"veY3i", BuiltinType::kUndefined},
    {"keSi", BuiltinType::kUndefined},
    {"n322", BuiltinType::kUndefined},
    {"vFFu", BuiltinType::kUndefined},
    {"GGIec3PP", BuiltinType::kUndefined},
    {"aeEE3", BuiltinType::kUndefined},
    {"eBBdd4", BuiltinType::kUndefined},
    {"vccE54", BuiltinType::kUndefined},
    {"KK", BuiltinType::kUndefined},
    {"vecRf", BuiltinType::kUndefined},
    {"v94D", BuiltinType::kUndefined},
    {"vMc4", BuiltinType::kUndefined},
    {"vecW077", BuiltinType::kUndefined},
    {"vec4I", BuiltinType::kUndefined},
    {"vd4h", BuiltinType::kUndefined},
    {"vc4i", BuiltinType::kUndefined},
    {"ect", BuiltinType::kUndefined},
    {"c33XX4i", BuiltinType::kUndefined},
    {"veEu", BuiltinType::kUndefined},
    {"vcXXu", BuiltinType::kUndefined},
    {"vexxBu", BuiltinType::kUndefined},
};

using BuiltinTypeParseTest = testing::TestWithParam<Case>;

TEST_P(BuiltinTypeParseTest, Parse) {
    const char* string = GetParam().string;
    BuiltinType expect = GetParam().value;
    EXPECT_EQ(expect, ParseBuiltinType(string));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, BuiltinTypeParseTest, testing::ValuesIn(kValidCases));
INSTANTIATE_TEST_SUITE_P(InvalidCases, BuiltinTypeParseTest, testing::ValuesIn(kInvalidCases));

using BuiltinTypePrintTest = testing::TestWithParam<Case>;

TEST_P(BuiltinTypePrintTest, Print) {
    BuiltinType value = GetParam().value;
    const char* expect = GetParam().string;
    EXPECT_EQ(expect, ToString(value));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, BuiltinTypePrintTest, testing::ValuesIn(kValidCases));

}  // namespace parse_print_tests

}  // namespace
}  // namespace tint::core
