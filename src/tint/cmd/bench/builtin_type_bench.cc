// Copyright 2022 The Dawn & Tint Authors
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/cmd/bench/builtin_type_bench.cc.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/lang/core/builtin_type.h"

#include <array>

#include "benchmark/benchmark.h"

namespace tint::core {
namespace {

void BuiltinTypeParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "__atomic_compareexchangeccresult_i32",
        "__atoml3_compare_exchane_resulti2",
        "__atomic_compare_Vxchange_result_i32",
        "__atomic_compare_exchange_result_i32",
        "__atomic_com1are_exchange_result_i32",
        "__atomic_qqompare_exchage_resulJ_i32",
        "__atllmic_compare_exchange_result_i377",
        "__atomicppcompareqqexchange_reslt_uHH2",
        "__atomi_compare_exchavge_cesult_3",
        "__atomic_copare_eGbhange_result_u32",
        "__atomic_compare_exchange_result_u32",
        "__atomic_coiipare_exvhange_result_u32",
        "__atomic_compaWWe_excha8ge_result_u32",
        "__atomic_comparxxMexchage_result_u32",
        "__fXexp_resgglt_bstract",
        "V_frexp_resul_abuXrct",
        "__frexp_result_abstra3t",
        "__frexp_result_abstract",
        "__frexp_resElt_abstract",
        "__frexTT_Pesult_abstract",
        "__frexp_resulxxddabstrct",
        "44_frexp_result_f16",
        "_VVfrexp_resulSS_f16",
        "__frexp_reRult_fR6",
        "__frexp_result_f16",
        "__frFxp_re9ut_f16",
        "__frep_result_f16",
        "__frRRVH_rOOsultf16",
        "__frepyresult_f32",
        "_nrr77rexp_result_fGll",
        "__4rex00_result_f32",
        "__frexp_result_f32",
        "__oorep_reult_f2",
        "__fzzexp_result_3",
        "__iir11x_respplt_f3",
        "__frexp_resuXXt_vec2_abstract",
        "55n99frexp_result_vec2_abstraIIt",
        "__fHHexpSSaresrrlt_Yec2_abstract",
        "__frexp_result_vec2_abstract",
        "__freHp_resutve2_abstkkact",
        "jfrexpgresult_veRR2_abstrac",
        "__frexp_resul_vec2_absbrac",
        "_jfrexp_result_vec2_f16",
        "__frexp_resultvec2_f16",
        "__freqpresultvec2_f16",
        "__frexp_result_vec2_f16",
        "__frexNN_result_vec_f16",
        "__frexp_resvvlt_vc2_f1",
        "__frexp_esult_vec2_f1QQ",
        "__rerp_result_ffec2_f2",
        "__frexp_result_vjc2_f32",
        "__frewwp_reul2_vec2_NN82",
        "__frexp_result_vec2_f32",
        "__frexpresult_vec2_f32",
        "__frexp_result_vec2_frr2",
        "_Gfrexp_result_vec2_f32",
        "__frexp_resulFF_vec3_abstract",
        "_frexp_resultvec3_Estract",
        "__fexp_result_vec3_abstrract",
        "__frexp_result_vec3_abstract",
        "frexp_result_vec3_abstract",
        "D_rexp_resXlt_veJJ3_abstract",
        "_frexp_resut_v8c_abstract",
        "_frexp_rsl1k_vec3_f16",
        "__frexp_reslt_vec3_f16",
        "__frexJ_reult_vec3_f16",
        "__frexp_result_vec3_f16",
        "c_frexp_result_vec3_f16",
        "__frexp_result_vec3Of16",
        "___frexp_reKKultvvvec3_f1tt",
        "8_frexp_reult_vxxc3_f32",
        "_frexp_resul___veFqqf32",
        "_qqfrexp_result_vec_f32",
        "__frexp_result_vec3_f32",
        "33_fOexp_result_ve3_6632",
        "__oorexQQ_rttsult_ve639f32",
        "__rexp_result_vec3_f662",
        "__frexp_reszzlt_Oc4xabstrac66",
        "__frexp_resyylt_vec4_abstract",
        "__frexp_resut_vecHH_aZsracZ",
        "__frexp_result_vec4_abstract",
        "_WWfrex44_resulq_vec4_astract",
        "__frexp_rsult_veOO4_abstract",
        "__frexp_resultoovc4_abstYct",
        "_frexp_esultvec4_f16",
        "__Frexp_result_ec4_f16",
        "__frewp_resut_vec4_f16",
        "__frexp_result_vec4_f16",
        "__frexp_reslt_veK4fG16",
        "__fqexp_result_veKK4_f16",
        "_F3rexp_result_vec4_f1mm",
        "__frexp_result_ec4_f32",
        "__frexp_result_qe4_f32",
        "__frbbxp_result_vec4_b2",
        "__frexp_result_vec4_f32",
        "__frexp_reslt_iiec4_f2",
        "__frexO_resulq_vec4_f32",
        "__frexp_resulTT_vec4vvf32",
        "__modf_resulFF_abstract",
        "fm00df_rePult_abstraQt",
        "__modf_result_abstPact",
        "__modf_result_abstract",
        "_modf_result_abstssac77",
        "__modf_resulC_bbRbstract",
        "__modf_result_abstracXX",
        "__OOofCCresuOOt_f16",
        "_smodf_resuutfL6",
        "__modX_result_f16",
        "__modf_result_f16",
        "__modf_reult_f16",
        "__modf_resqqO16",
        "__modf22result_f16",
        "__modf_X0eszzlt_fy",
        "_VVmPf_result_f3i",
        "__monnfCresultf32",
        "__modf_result_f32",
        "_HHAmodf_resqltf32",
        "__modf_resut_f32",
        "__modresuft_f3KK",
        "__modlPrsultggvec2_astract",
        "__odf_result_vec2_abstract",
        "__mocTf_result_vNc2_abstra4t",
        "__modf_result_vec2_abstract",
        "__modf77result_vec2_plbtract",
        "__mdf_resultNNvec2zabstgact",
        "_modf_bbesult_vuuc2_abtraXXt",
        "__modf_esult_vec2_f16",
        "__mQdf_esuKt_vec_8816",
        "q_m9dfresult_vec2_f16",
        "__modf_result_vec2_f16",
        "__11odf_result_vec2_f16",
        "_iimodf_result_vF222f16",
        "_77modf_result_vec2f16",
        "__odfNNr2sult_vec2_f32",
        "__modf_rVVsult_vec2_f32",
        "__modf_Fesult_vewW2_f311",
        "__modf_result_vec2_f32",
        "__modf_rwwsult_vec_f32",
        "__modf_result_Dec2_f32",
        "__modf_result_ec2_f3K",
        "__modf_resul1PP_vech_abstfact",
        "__modf_result_vec_abstract",
        "__YYodf_result_vec3_abstract",
        "__modf_result_vec3_abstract",
        "__mHHdfresult_kkec3_abstract",
        "__modf_result_vec3rrabstract",
        "__modf_ssesulWW_vec_abstract",
        "__mYdf_reslt_vec3_f16",
        "q_modLrfsult_vec3_f16",
        "uu_vvo22f_rfsult_ec3_f16",
        "__modf_result_vec3_f16",
        "__mdf_reslt_vec3_f16",
        "__modfYYresult_ve3f16",
        "__modfEr77sult_vec3_yY16",
        "__odf_desuMot_vec3_f32",
        "__mMMf_result_vec3_f32",
        "__modf_result_vec3_f355",
        "__modf_result_vec3_f32",
        "__modf_rest_vec3Nf32",
        "_m33df_result_Oec3_f32",
        "__modf_re3ult_vec3_f32",
        "__momf_esult_Iec4_abstract",
        "__modf_resultrvec4_absnnracK",
        "__modf_eslt_ve4_absXXact",
        "__modf_result_vec4_abstract",
        "__modf_rsult_pLLI4_abstract",
        "_modf_resflt_vec4_bstract",
        "_Ymodf_resultURDec4_abtract",
        "__hodf_result_vec4_f16",
        "__moquu_rslt_vec4_f1II",
        "__modf_result_vecH_f16",
        "__modf_result_vec4_f16",
        "__oQQf_resultvvvc4_f16",
        "__modf_eeult66ec4_f16",
        "_Omodf_r7sut_vec4_W16",
        "__modf_DDes0lt_v55c4_f32",
        "__modf_rIIsult_Hec4_f32",
        "_modf_result_vec4_f32",
        "__modf_result_vec4_f32",
        "_modf_result_vrc4_f32",
        "_lmodf_result_vec4_f32",
        "tt_modfGeslt_vec4_fJJ2",
        "ryay",
        "aray",
        "IIrBBay",
        "array",
        "TTrr338",
        "arUUSSannd",
        "aZx5CC",
        "aqkomic",
        "5iiop00",
        "annoIIic",
        "atomic",
        "cctKi",
        "aoKK",
        "at66mic",
        "bindPPng_arKK",
        "bixxding_arry",
        "bindiqg_array",
        "binding_array",
        "MMindinSSyyarry",
        "binding_uay",
        "indigSaray",
        "5oFFl",
        "borz4l",
        "WW",
        "bool",
        "ZJJCoX",
        "boPP",
        "bocl",
        "fll66",
        "91yy",
        "f1KK",
        "f16",
        "x_",
        "K",
        "kVz",
        "K3S",
        "f2",
        "fVV",
        "f32",
        "IAU2",
        "j",
        "Y4",
        "i2",
        "1xx",
        "ccm",
        "i32",
        "iJJ",
        "UfCDD",
        "i3g",
        "8",
        "B",
        "8",
        "i8",
        "f",
        "66A",
        "8",
        "ipuu_attahent",
        "input_a0tnn3hmeit",
        "innut_attachuueCCK",
        "input_attachment",
        "inputXattallment",
        "ippput_attachment",
        "iput_attachwwent",
        "gmauu2",
        "aat2m",
        "mat2ZRRT",
        "mat2x2",
        "Oa8T2x2",
        "mat2002",
        "maBB2xm",
        "at2ppM",
        "matOO2f",
        "mGG2x2G",
        "mat2x2f",
        "mHHt2x11f",
        "eat2x6Ff",
        "atx2f",
        "mat2ii2l",
        "mt2x2h",
        "IIvvt2x29",
        "mat2x2h",
        "mat22h",
        "mat2h2h",
        "mllt2xPzz",
        "at",
        "maqffx3",
        "maJdd2x",
        "mat2x3",
        "marXXz",
        "2t2x3",
        "yyNt2x3",
        "mt2O3",
        "uZtrx3f",
        "latdde23f",
        "mat2x3f",
        "matVVf",
        "1IIt2x3",
        "mat2xbf",
        "matzh",
        "mao2ii3h",
        "mat35",
        "mat2x3h",
        "at2xSh",
        "mat22h",
        "maG1C3h",
        "matf8x4",
        "ma24",
        "maSJJ2x4",
        "mat2x4",
        "9t24",
        "TTaJJbbx4",
        "m66x4",
        "ut2x466",
        "aW2x4f",
        "mtx4f",
        "mat2x4f",
        "mOt2x4",
        "THat2xBB",
        "maRR2xf",
        "maVV0Lh",
        "a2OOK4h",
        "magw2xh",
        "mat2x4h",
        "hht2L4h",
        "aKii2xh",
        "ma2x4h",
        "m88Ux2",
        "matrrvv2",
        "mmtxw",
        "mat3x2",
        "mj43x2",
        "matXx2",
        "m8t3x2",
        "mvEE3x2f",
        "mai93zz",
        "mQQJJnxGGf",
        "mat3x2f",
        "mass3x2f",
        "matKxPf",
        "mat3ttf",
        "mt3x2",
        "mMMt3x2h",
        "maJ03x2h",
        "mat3x2h",
        "V8x2",
        "maKggx2hh",
        "maf3x2h",
        "maQ77x3",
        "mat3xY",
        "mak3S",
        "mat3x3",
        "nt322",
        "mFFx3",
        "GGatPPuUU",
        "EEvFx3f",
        "ddtBBDDef",
        "m55tMccE3",
        "mat3x3f",
        "aKKx3",
        "mat3x3R",
        "maDx39",
        "mt3x3h",
        "aaat3I",
        "m77t3x3h",
        "mat3x3h",
        "matIx3h",
        "md3x3h",
        "mat33h",
        "mtt3",
        "XX33t3x4",
        "Et3x4",
        "mat3x4",
        "mXX3x4",
        "mxBt3x4",
        "Wt3x",
        "mat3x466",
        "matxv0",
        "txf",
        "mat3x4f",
        "mpt3xf",
        "at114f",
        "EaJ3yBBf",
        "mqIm3x4h",
        "ma3xFh",
        "Yt3x4h",
        "mat3x4h",
        "mHHtDh4h",
        "Ht22h",
        "matx4",
        "mat42",
        "mt4x2",
        "ddat4x2",
        "mat4x2",
        "mPO4x2",
        "bbtB2",
        "m00tx2",
        "mat4xhf",
        "mgYtx2f",
        "mat4O2f",
        "mat4x2f",
        "ah4xf",
        "fpaEEx2f",
        "mavx2f",
        "mzztx2h",
        "ma4x2h",
        "OOaJxii",
        "mat4x2h",
        "mft4G2h",
        "mat4x222T",
        "datlx2h",
        "mab4x3",
        "mat4xB",
        "mPIItXxS",
        "mat4x3",
        "matjjx3",
        "macc4_3",
        "SS6zz4xx",
        "a4xG",
        "mx44N3v",
        "atAAx00p",
        "mat4x3f",
        "eeytyf",
        "mabWWx0f",
        "ttatMMxmf",
        "madh",
        "mat_3h",
        "Vat4EE3h",
        "mat4x3h",
        "mat44h",
        "mRIxah",
        "ma4mmh",
        "apjx4",
        "matx4",
        "a44",
        "mat4x4",
        "mat4xd",
        "mttPPCCd",
        "t4x4",
        "m5t4x4f",
        "m9jtffx4f",
        "matRvxXXf",
        "mat4x4f",
        "ctx4f",
        "XX8t5x4",
        "t4x4f",
        "mcctxpph",
        "mat4v4h",
        "EESSt4xh",
        "mat4x4h",
        "mt4xh",
        "_at4",
        "ma4xwwh",
        "pd99r",
        "99P",
        "KKt",
        "ptr",
        "poDD",
        "i",
        "q",
        "s00Ller",
        "snm66vver",
        "namprre",
        "sampler",
        "eexxper",
        "sOmNNleCC",
        "sample",
        "s4mpleracomparison",
        "NNamNNler_coparison",
        "samler_comparison",
        "sampler_comparison",
        "sampler_cmpaisun",
        "amplSr_comAarisYYEE",
        "sampler0comparison",
        "subaaroup_matrix_left",
        "subgroumaqmmrix_left",
        "subgrup_matrix_left",
        "subgroup_matrix_left",
        "EuUUgrou_matrix_let",
        "suKKgrouDD_mtrixleft",
        "subg_toup_matrix_0eft",
        "subgrpup_latrxresuAt",
        "sbgroup_matrixMresult",
        "subgroup_matriBB_result",
        "subgroup_matrix_result",
        "subg99up_matrxbbresnnlt",
        "EEu1grouAA_matrix_resul",
        "subgroTp_ma5rix_resul66",
        "subgroup_matriH_right",
        "sHbgrxxup_matrix_ight",
        "szbgroup_0atrixyynight",
        "subgroup_matrix_right",
        "sbgroup_matrix_right",
        "subroup_mHtrix_rkght",
        "sucgroup_matrix_riht",
        "orrxtur_1d",
        "teJJtr_1d",
        "texC0ure_1",
        "texture_1d",
        "tAAtFre_99x",
        "texture_cd",
        "textSre_1d",
        "toxBure_2d",
        "exture_2d",
        "textureemm",
        "texture_2d",
        "tegPPure_2QQ",
        "teuB_2",
        "tllNrKK_2d",
        "texture_d_rrray",
        "rppture_2d_array",
        "texture_2dyParray",
        "texture_2d_array",
        "extue_2ZZ_arrccy",
        "texure_2d_arra",
        "tex00ure_2d_array",
        "ssextuPPeJBd",
        "txfffJre_3ww",
        "I1XXtue_3d",
        "texture_3d",
        "exted",
        "texture3d",
        "tKKxtue_3d",
        "meture_dub44",
        "pexture_cuoe",
        "jhhxtureHHNcue",
        "texture_cube",
        "textuwEUe_cub33",
        "uuxture_cue",
        "ecture_rruKdd",
        "tex2re_cuttPP_arrar",
        "textu1swwcube_array",
        "texturennc11be_crray",
        "texture_cube_array",
        "txture_cube_array",
        "textre_cube_array",
        "aaex66SSre_cbeIarray",
        "textuEEe_dept_2d",
        "ccexture_deVthIRd",
        "te9tue_deph_2d",
        "texture_depth_2d",
        "taaxture_depthh2",
        "textuLLe_depth2d",
        "txfure_drpthmm2",
        "qext4re_Vepmh_2d_rray",
        "textur_dept___2d_aray",
        "texurQdepth_2d_array",
        "texture_depth_2d_array",
        "tddxturedepth_2d_arEaRR",
        "texture9depth_2d_aray",
        "texu0e_depthCC2daray",
        "textuezdepthcube",
        "texccure_depth_cube",
        "textureOQQ_pt_cube",
        "texture_depth_cube",
        "teturettdeth_cube",
        "textCCrepzzdeEt33_cube",
        "textudde_depth_hhube",
        "e66ture_dep77h_cube_array",
        "tPxture_depth_cube_array",
        "texturewdepth_cube_array",
        "texture_depth_cube_array",
        "textuxu_depth_ubearray",
        "textureXXdepth_cu6e_array",
        "extuRRedepth_cube_aray",
        "texture_deph_multiaVVp1e_2d",
        "texHHurGG_depth_multisampled_2d",
        "texture_d7pth_mulMisampled_FFd",
        "texture_depth_multisampled_2d",
        "texture_depthmultisampled_2d",
        "exture_depth_mulTi3amplggd2d",
        "texture_depKKh_muQti1_mpled_Pd",
        "teture_eEternal",
        "exture_Mternal",
        "texture_GXxSSe77nl",
        "texture_external",
        "textueFFextttrnaK",
        "teZZtusse_eoternUUl",
        "textureexternal",
        "texture_lultisampled_2d",
        "texhure_multisampled_2d",
        "textuKe_mulTTisapled_2k",
        "texture_multisampled_2d",
        "teture_multwwsamplede2d",
        "textrvv_multisjjmpled_Kd",
        "textYYremltisampled_2d",
        "EIIxture_stoage_1d",
        "texture_storage_1QQ",
        "teturelstoraPe1d",
        "texture_storage_1d",
        "texture_storagffH1d",
        "textune_storage_1d",
        "t66xtuFe_stgage_1d",
        "t8ssture_storahe_2d",
        "tellture_sFFrage_2d",
        "0extur2_storajje_2",
        "texture_storage_2d",
        "tegture_storage_2d",
        "texure_storage_2d",
        "texture_storaffe_d",
        "texturestrge_2d_array",
        "texture_storage2d_array",
        "texture_storge_qqd_array",
        "texture_storage_2d_array",
        "AAextur_storage_2drray",
        "vexturestorage_2d_array",
        "texture_storage_2d_arjjy",
        "textZZre_storage_3d",
        "tPPxtuIIe_stOrUge23d",
        "texture_storagZZ_3d",
        "texture_storage_3d",
        "texture_stonnage_3d",
        "teZZture_st22rakkH_3d",
        "texture_storae_3d",
        "R",
        "uqq99",
        "u772",
        "u32",
        "3",
        "uccu",
        "3RR",
        "lJJ",
        "nn",
        "",
        "u8",
        "66QD",
        "v",
        "3jjM",
        "ve44uxx",
        "66ec",
        "zSAHH",
        "vec2",
        "veHK",
        "_ec2",
        "vec44",
        "uec2",
        "vc2f",
        "EEtmec2f",
        "vec2f",
        "vec",
        "ec2rr",
        "xc2f",
        "vezz",
        "vec2e",
        "uc2Zp",
        "vec2h",
        "00uc7TT",
        "vvJJ",
        "vecQh",
        "ve3R",
        "e",
        "veprPP",
        "vec2i",
        "xxeDD88i",
        "lldmYYqqi",
        "vFFc__",
        "rrNNc2u",
        "leM2u",
        "c2",
        "vec2u",
        "xlc2u",
        "ec2u",
        "ae44u",
        "WWeG3",
        "vjjc",
        "vjjc3",
        "vec3",
        "vj3",
        "ve3",
        "99ec3",
        "vyVV3f",
        "ec3xZ",
        "v33vvf",
        "vec3f",
        "vecs9",
        "veF3",
        "uec3f",
        "eIKK",
        "ve3J",
        "vSSCCXXh",
        "vec3h",
        "JecWW6ZZ",
        "ecd5",
        "vBBcBU",
        "JJ0c311",
        "vectti",
        "vttc",
        "vec3i",
        "veL3i",
        "v1c3i",
        "veww3i",
        "ece",
        "vc3u",
        "vec3NN",
        "vec3u",
        "vUlRR__u",
        "vecHu",
        "vrCC3u",
        "ec4",
        "dcIp",
        "ec4",
        "vec4",
        "LN",
        "h",
        "ecAK",
        "vec4qq",
        "vecGSf",
        "qcc4f",
        "vec4f",
        "ec4",
        "veQf",
        "vzzQQf",
        "3c4h",
        "ve4",
        "Oec",
        "vec4h",
        "THHc4",
        "66SSc4O",
        "ddYTT4h",
        "vs4gg",
        "vec4GG",
        "vQllcOi",
        "vec4i",
        "ec4i",
        "vecrri",
        "ecyy7",
        "B22ecYu",
        "Vec4yy",
        "v4",
        "vec4u",
        "vecddu",
        "VVz42",
        "veyy4u",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseBuiltinType(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(BuiltinTypeParser);

}  // namespace
}  // namespace tint::core
