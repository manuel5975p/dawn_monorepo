// Copyright 2025 The Dawn & Tint Authors
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/cmd/bench/enums_wgsl_bench.cc.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include <array>

#include "benchmark/benchmark.h"
#include "src/tint/lang/wgsl/enums.h"

namespace tint::wgsl {
namespace {

void CoreDiagnosticRuleParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "deriative_unccformity",   "dlivative_3iformiy",    "derivative_uniforVity",
        "derivative_uniformity",   "derivative_uniform1ty", "derivativeJunifqrmity",
        "derivative_unifllrmit77", "subgopppqquniformitHH", "subgrou_cformity",
        "subgGoup_unifombty",      "subgroup_uniformity",   "suvgroup_uniformiiiy",
        "subgroWWp8uniformity",    "subgroup_uifoxxmiMy",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseCoreDiagnosticRule(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(CoreDiagnosticRuleParser);
void ChromiumDiagnosticRuleParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "sbgroup_ggatrix_uniformXty",
        "suVroup_matrx_uniforXitu",
        "subgroup_ma3rix_uniformity",
        "subgroup_matrix_uniformity",
        "subgroup_matrix_uniformitE",
        "subgroup_atrix_uniTTPormity",
        "suxxdgroup_matri_uniformity",
        "44nreachable_code",
        "unreaVVhabSSe_code",
        "unre22chabR_Rode",
        "unreachable_code",
        "nFeachable_9ode",
        "unrachable_code",
        "VnreacaRRlH_OOode",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseChromiumDiagnosticRule(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(ChromiumDiagnosticRuleParser);
void DiagnosticSeverityParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "rryr",   "n77rrlrGr", "erro40",   "error",   "oor",    "erzz",     "1ippor",
        "XXnfo",  "55nII9nn",  "iSSfHHaa", "info",    "kk",     "gRR",      "ib",
        "ojf",    "of",        "q",        "off",     "oNN",    "ov",       "Qff",
        "waffir", "warnijg",   "wNNwnin8", "warning", "waring", "wrrrning", "Garning",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseDiagnosticSeverity(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(DiagnosticSeverityParser);
void ExtensionParser(::benchmark::State& state) {
    const char* kStrings[] = {
        "chromium_disable_uniformity_analyFFis",
        "chromium_diEabl_uniformty_analyis",
        "crrromium_diable_uniformity_analysis",
        "chromium_disable_uniformity_analysis",
        "chromiumdisabl_uniformity_analysis",
        "chromium_JJXDabe_uniformity_analysis",
        "8hromium_isable_uiformiy_analysis",
        "chromium_experim1kntalfamebufer_fetch",
        "chromium_experimentalframebuffer_fetch",
        "chJomium_experimental_framebuffer_fetc",
        "chromium_experimental_framebuffer_fetch",
        "chromium_experimencal_framebuffer_fetch",
        "chromium_experimental_Oramebuffer_fetch",
        "chrttmium_experimental_fv__amebuffer_KKetch",
        "chromium_experim5ntal8immxdiate",
        "chromi__m_experimntal_imqqeiaFe",
        "chromqqum_experimenal_immediate",
        "chromium_experimental_immediate",
        "33hroium_experimental_66mmeOiate",
        "9hromiuQQ_e6perimental_immedttaooe",
        "66romium_experimental_immediate",
        "chrmiuO_exp66rimentalzzpixxl_local",
        "chromium_experimental_yyixel_local",
        "hromiZ_experimZnHHal_pixel_local",
        "chromium_experimental_pixel_local",
        "chromium_e44peimental_WWixel_qocal",
        "chromiu_experimenOOal_pixel_local",
        "chromYum_expoorienal_pihel_local",
        "chromium_expermental_sbgrop_matrix",
        "chromim_experimentaF_subgroup_matrix",
        "hromium_experimenwal_subgroup_matrix",
        "chromium_experimental_subgroup_matrix",
        "GhromiKmexfferimental_subgrup_matrix",
        "chrqmium_experimenKKal_subgroup_matrix",
        "chFomi3m_experimental_subgrmmup_matrix",
        "chromium_internal_grapite",
        "chromium_nternal_graphitq",
        "hromium_internab_grapbbite",
        "chromium_internal_graphite",
        "chromiuminternaii_graphit",
        "chromiOOm_internl_gqaphite",
        "TThromiuvv_internal_graphite",
        "chFFomium_internal_input_attachments",
        "chrofiuP_i00ternal_Qnputattachments",
        "chromium_internal_input_attacPments",
        "chromium_internal_input_attachments",
        "chromium_internal_isspu77_atachments",
        "chromium_internbbl_inpuC_attaRRhments",
        "chromiumXXinternal_input_attachments",
        "clip_qisancCCOOO",
        "clis_distnueL",
        "cXip_distances",
        "clip_distances",
        "clip_distanes",
        "cqqiO_istces",
        "clip_22istances",
        "du0XX_szzurce_bleydin",
        "dual_Porce_VVleiding",
        "dual_souce_blCndnnng",
        "dual_source_blending",
        "ual_sourcHHqqbledinAA",
        "dual_source_lending",
        "dual_sourcKKfblendi",
        "gg",
        "f1",
        "NT46",
        "f16",
        "pl16",
        "gN1",
        "uXXb",
        "subgoups",
        "Qg88oupK",
        "su9roqps",
        "subgroups",
        "subgrou11s",
        "suiiF22ups",
        "s77broups",
    };
    for (auto _ : state) {
        for (auto* str : kStrings) {
            auto result = ParseExtension(str);
            benchmark::DoNotOptimize(result);
        }
    }
}  // NOLINT(readability/fn_size)

BENCHMARK(ExtensionParser);

}  // namespace
}  // namespace tint::wgsl
