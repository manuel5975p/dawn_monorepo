#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Result {
  /* 0x0000 */ tint_array<float, 1> values;
};

struct tint_module_vars_struct {
  texture2d_array<float, access::sample> myTexture;
  device Result* result;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

void main_inner(uint3 GlobalInvocationID, tint_module_vars_struct tint_module_vars) {
  uint flatIndex = (((4u * GlobalInvocationID.z) + (2u * GlobalInvocationID.y)) + GlobalInvocationID.x);
  flatIndex = (flatIndex * 1u);
  int2 const v = int2(GlobalInvocationID.xy);
  uint const v_1 = min(uint(0), (tint_module_vars.myTexture.get_array_size() - 1u));
  uint const v_2 = min(uint(0), (tint_module_vars.myTexture.get_num_mip_levels() - 1u));
  uint2 const v_3 = (uint2(tint_module_vars.myTexture.get_width(v_2), tint_module_vars.myTexture.get_height(v_2)) - uint2(1u));
  float4 texel = tint_module_vars.myTexture.read(min(uint2(v), v_3), v_1, v_2);
  {
    uint i = 0u;
    while(true) {
      if ((i < 1u)) {
      } else {
        break;
      }
      (*tint_module_vars.result).values[min((flatIndex + i), ((((*tint_module_vars.tint_storage_buffer_sizes)[0u].x - 0u) / 4u) - 1u))] = texel.x;
      {
        i = (i + 1u);
      }
      continue;
    }
  }
}

kernel void v_4(uint3 GlobalInvocationID [[thread_position_in_grid]], texture2d_array<float, access::sample> myTexture [[texture(0)]], device Result* result [[buffer(0)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.myTexture=myTexture, .result=result, .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  main_inner(GlobalInvocationID, tint_module_vars);
}
